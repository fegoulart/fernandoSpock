package main

import (
	"testing"
	"github.com/stretchr/testify/assert"
)

func execTranslate(englishName string, expectedResult string , t *testing.T) {
	t.Logf(englishName + " Translation")

	result := translate(englishName)
	assert.Equal(t, expectedResult,result,  "Translation failed.")

}


func TestTranslate(t *testing.T) {

	t.Logf("Testing Characters Translation")

	execTranslate("Uhura", "0xF8E5 0xF8D6 0xF8E5 0xF8E1 0xF8D0",t)
	execTranslate("P'Chan", "P'Chan",t)
	execTranslate("Alzen","Alzen" ,t)
	execTranslate("Takar","Takar" ,t)
	execTranslate("Kafar","Kafar" ,t)
	execTranslate("Geral","Geral" ,t)
	execTranslate("Valen","0xF8E6 0xF8D0 0xF8D9 0xF8D4 0xF8DB" ,t)
	execTranslate("O'Zaal","O'Zaal" ,t)
	execTranslate("Dumah","0xF8D3 0xF8E5 0xF8DA 0xF8D0 0xF8D6" ,t)
	execTranslate("Gaumen","Gaumen" ,t)
	execTranslate("Kray","Kray" ,t)
	execTranslate("Lidell Ren","0xF8D9 0xF8D7 0xF8D3 0xF8D4 0xF8D9 0xF8D9 0x0020 0xF8E1 0xF8D4 0xF8DB" ,t)
	execTranslate("Tolen Ren","0xF8E3 0xF8DD 0xF8D9 0xF8D4 0xF8DB 0x0020 0xF8E1 0xF8D4 0xF8DB" ,t)
	execTranslate("Egrid","Egrid" ,t)
	execTranslate("Joleg","Joleg" ,t)
	execTranslate("Adar","0xF8D0 0xF8D3 0xF8D0 0xF8E1" ,t)
	execTranslate("Kir","Kir" ,t)
	execTranslate("Rahmin","0xF8E1 0xF8D0 0xF8D6 0xF8DA 0xF8D7 0xF8DB" ,t)
	execTranslate("Lumas","0xF8D9 0xF8E5 0xF8DA 0xF8D0 0xF8E2" ,t)
	execTranslate("Automated Commander 122","Automated Commander 122" ,t)
	execTranslate("Kashyk","Kashyk" ,t)
	execTranslate("Prax","Prax" ,t)
	execTranslate("Voje","0xF8E6 0xF8DD 0xF8D8 0xF8D4" ,t)
	execTranslate("Tebbis","0xF8E3 0xF8D4 0xF8D1 0xF8D1 0xF8D7 0xF8E2" ,t)
	execTranslate("Dysek","Dysek" ,t)
	execTranslate("Gar","Gar" ,t)
	execTranslate("Kovin","Kovin" ,t)
	execTranslate("Goth","Goth" ,t)
	execTranslate("Onquanii","0xF8DD 0xF8DB 0xF8DF 0xF8E5 0xF8D0 0xF8DB 0xF8D7 0xF8D7" ,t)
	execTranslate("Ma'Bor Jetrel","0xF8DA 0xF8D0 0xF8E9 0xF8D1 0xF8DD 0xF8E1 0x0020 0xF8D8 0xF8D4 0xF8E3 0xF8E1 0xF8D4 0xF8D9" ,t)
	execTranslate("Y'Sek","Y'Sek" ,t)
	execTranslate("Karr","Karr" ,t)
	execTranslate("Turanj","0xF8E3 0xF8E5 0xF8E1 0xF8D0 0xF8DB 0xF8D8" ,t)
	execTranslate("Donik","Donik" ,t)
	execTranslate("Idrin","0xF8D7 0xF8D3 0xF8E1 0xF8D7 0xF8DB" ,t)
	execTranslate("Resh","0xF8E1 0xF8D4 0xF8E2 0xF8D6" ,t)
	execTranslate("Nori","0xF8DB 0xF8DD 0xF8E1 0xF8D7" ,t)
	execTranslate("Demmas","0xF8D3 0xF8D4 0xF8DA 0xF8DA 0xF8D0 0xF8E2" ,t)
	execTranslate("Ameron","0xF8D0 0xF8DA 0xF8D4 0xF8E1 0xF8DD 0xF8DB" ,t)
	execTranslate("Tieran","0xF8E3 0xF8D7 0xF8D4 0xF8E1 0xF8D0 0xF8DB" ,t)
	execTranslate("Adin","0xF8D0 0xF8D3 0xF8D7 0xF8DB" ,t)
	execTranslate("Demmas","0xF8D3 0xF8D4 0xF8DA 0xF8DA 0xF8D0 0xF8E2" ,t)
	execTranslate("Assan","0xF8D0 0xF8E2 0xF8E2 0xF8D0 0xF8DB" ,t)
	execTranslate("Chellick","Chellick" ,t)
	execTranslate("Abbot","0xF8D0 0xF8D1 0xF8D1 0xF8DD 0xF8E3" ,t)
	execTranslate("Valek","Valek" ,t)
	execTranslate("Haliz","Haliz" ,t)
	execTranslate("Tersa","0xF8E3 0xF8D4 0xF8E1 0xF8E2 0xF8D0" ,t)
	execTranslate("Razik","Razik" ,t)
	execTranslate("Tierna","0xF8E3 0xF8D7 0xF8D4 0xF8E1 0xF8DB 0xF8D0" ,t)
	execTranslate("Haron","0xF8D6 0xF8D0 0xF8E1 0xF8DD 0xF8DB" ,t)
	execTranslate("Rettik","Rettik" ,t)
	execTranslate("Loran","0xF8D9 0xF8DD 0xF8E1 0xF8D0 0xF8DB" ,t)
	execTranslate("Culluh","Culluh" ,t)
	execTranslate("Lorrum","0xF8D9 0xF8DD 0xF8E1 0xF8E1 0xF8E5 0xF8DA" ,t)
	execTranslate("Jabin","0xF8D8 0xF8D0 0xF8D1 0xF8D7 0xF8DB" ,t)
	execTranslate("Minnis","0xF8DA 0xF8D7 0xF8DB 0xF8DB 0xF8D7 0xF8E2" ,t)
	execTranslate("Surat","0xF8E2 0xF8E5 0xF8E1 0xF8D0 0xF8E3" ,t)
	execTranslate("Karden","Karden" ,t)
	execTranslate("Naroq","0xF8DB 0xF8D0 0xF8E1 0xF8DD 0xF8DF" ,t)
	execTranslate("Jhet'leya","0xF8D8 0xF8D6 0xF8D4 0xF8E3 0xF8E9 0xF8D9 0xF8D4 0xF8E8 0xF8D0" ,t)
	execTranslate("Q'ret","0xF8E0 0xF8E9 0xF8E1 0xF8D4 0xF8E3" ,t)
	execTranslate("Chardis","Chardis" ,t)
	execTranslate("Dejaren","0xF8D3 0xF8D4 0xF8D8 0xF8D0 0xF8E1 0xF8D4 0xF8DB" ,t)
	execTranslate("Kellin","Kellin" ,t)
	execTranslate("Curneth","Curneth" ,t)
	execTranslate("Morin","0xF8DA 0xF8DD 0xF8E1 0xF8D7 0xF8DB" ,t)
	execTranslate("Gaul","Gaul" ,t)
	execTranslate("Jisa","0xF8D8 0xF8D7 0xF8E2 0xF8D0" ,t)
	execTranslate("Gedrin","Gedrin" ,t)
	execTranslate("Orek","Orek" ,t)




}

func execGetSpecies(englishName string, expectedResult string , t *testing.T) {
	t.Logf(englishName + " Get Species")

	_, resultMessage := getSpecies(englishName)
	assert.Equal(t,  expectedResult,resultMessage, "Species Failed")
}

func TestGetSpecies(t *testing.T) {

	t.Logf("Testing Species Fetch")

	execGetSpecies("Uhura", "Human", t)
	execGetSpecies("P'Chan", "Species 571",t)
	execGetSpecies("Alzen","Srivani" ,t)
	execGetSpecies("Takar","Srivani" ,t)
	execGetSpecies("Kafar","Takarian" ,t)
	execGetSpecies("Geral","Annari" ,t)
	execGetSpecies("Valen","Annari" ,t)
	execGetSpecies("O'Zaal","Antarian" ,t)
	execGetSpecies("Dumah","B'omar" ,t)
	execGetSpecies("Gaumen","B'omar" ,t)
	execGetSpecies("Kray","Banea" ,t)
	execGetSpecies("Lidell Ren","Banea" ,t)
	execGetSpecies("Tolen Ren","Banea" ,t)
	execGetSpecies("Egrid","Benkaran" ,t)
	execGetSpecies("Joleg","Benkaran" ,t)
	execGetSpecies("Adar","Brenari" ,t)
	execGetSpecies("Kir","Brenari" ,t)
	execGetSpecies("Rahmin","Caatati" ,t)
	execGetSpecies("Lumas","Caatati" ,t)
	execGetSpecies("Automated Commander 122","Cravic" ,t)
	execGetSpecies("Kashyk","Devore" ,t)
	execGetSpecies("Prax","Devore" ,t)
	execGetSpecies("Voje","Dinaali" ,t)
	execGetSpecies("Tebbis","Dinaali" ,t)
	execGetSpecies("Dysek","Dinaali" ,t)
	execGetSpecies("Gar","Dralian" ,t)
	execGetSpecies("Kovin","Entharan" ,t)
	execGetSpecies("Goth","Etanian" ,t)
	execGetSpecies("Onquanii","Garan" ,t)
	execGetSpecies("Ma'Bor Jetrel","Haakonian" ,t)
	execGetSpecies("Y'Sek","Hazari" ,t)
	execGetSpecies("Karr","Hirogen" ,t)
	execGetSpecies("Turanj","Hirogen" ,t)
	execGetSpecies("Donik","Hirogen" ,t)
	execGetSpecies("Idrin","Hirogen" ,t)
	execGetSpecies("Resh","Ilari" ,t)
	execGetSpecies("Nori","Ilari" ,t)
	execGetSpecies("Demmas","Ilari" ,t)
	execGetSpecies("Ameron","Ilari" ,t)
	execGetSpecies("Tieran","Ilari" ,t)
	execGetSpecies("Adin","Ilari" ,t)
	execGetSpecies("Demmas","Ilari" ,t)
	execGetSpecies("Assan","Imhotep" ,t)
	execGetSpecies("Chellick","Jye" ,t)
	execGetSpecies("Abbot","Kadi" ,t)
	execGetSpecies("Valek","Kazon" ,t)
	execGetSpecies("Haliz","Kazon" ,t)
	execGetSpecies("Tersa","Kazon" ,t)
	execGetSpecies("Razik","Kazon" ,t)
	execGetSpecies("Tierna","Kazon" ,t)
	execGetSpecies("Haron","Kazon" ,t)
	execGetSpecies("Rettik","Kazon" ,t)
	execGetSpecies("Loran","Kazon" ,t)
	execGetSpecies("Culluh","Kazon" ,t)
	execGetSpecies("Lorrum","Kazon" ,t)
	execGetSpecies("Jabin","Kazon" ,t)
	execGetSpecies("Minnis","Kazon" ,t)
	execGetSpecies("Surat","Kazon" ,t)
	execGetSpecies("Karden","Kazon" ,t)
	execGetSpecies("Naroq","Kesat" ,t)
	execGetSpecies("Jhet'leya","Kobali" ,t)
	execGetSpecies("Q'ret","Kobali" ,t)
	execGetSpecies("Chardis","Mislenite" ,t)
	execGetSpecies("Dejaren","Serosian" ,t)
	execGetSpecies("Kellin","Human" ,t)
	execGetSpecies("Curneth","Ramuran" ,t)
	execGetSpecies("Morin","Vaadwaur" ,t)
	execGetSpecies("Gaul","Vaadwaur" ,t)
	execGetSpecies("Jisa","Vaadwaur" ,t)
	execGetSpecies("Gedrin","Vaadwaur" ,t)
	execGetSpecies("Orek","Telsian" ,t)




}
